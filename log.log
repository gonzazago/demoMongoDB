11-01-2018 09:31:26.297 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 7856 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 09:31:26.356 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 09:31:26.991 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4a5c9ec5: startup date [Thu Jan 11 09:31:26 ART 2018]; root of context hierarchy
11-01-2018 09:31:37.482 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 09:31:40.050 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 09:31:40.140 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 09:31:42.107 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 09:31:42.110 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 09:31:42.113 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 09:31:42.127 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 09:31:42.128 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 09:31:42.129 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 09:31:42.130 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 09:31:42.132 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 09:31:42.134 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 09:31:42.141 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 09:31:42.144 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 09:31:42.147 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 09:31:42.150 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 09:31:42.488 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 09:31:42.489 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 09:31:45.299 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 09:31:45.913 [cluster-ClusterId{value='5a5759313d3c001eb0448545', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:953}] to localhost:27017
11-01-2018 09:31:45.924 [cluster-ClusterId{value='5a5759313d3c001eb0448545', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5488049}
11-01-2018 09:31:49.542 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 09:31:49.544 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 09:31:49.546 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 09:31:50.027 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4a5c9ec5: startup date [Thu Jan 11 09:31:26 ART 2018]; root of context hierarchy
11-01-2018 09:31:55.441 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 09:31:58.959 [cluster-ClusterId{value='5a57593b3d3c001eb0448546', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:954}] to localhost:27017
11-01-2018 09:31:58.964 [cluster-ClusterId{value='5a57593b3d3c001eb0448546', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3401340}
11-01-2018 09:31:59.404 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:955}] to localhost:27017
11-01-2018 09:32:00.671 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:956}] to localhost:27017
11-01-2018 09:32:11.183 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 09:32:12.191 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 09:32:18.471 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 09:32:19.204 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 09:32:19.293 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 09:32:19.295 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 09:32:19.297 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 09:32:25.133 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 09:32:25.135 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 09:32:25.284 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 64.052 seconds (JVM running for 91.679)
11-01-2018 09:38:35.629 [reactor-http-nio-2] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.logError - Failed to handle request [POST http://localhost:9080/api/sharepoint]
org.springframework.web.client.HttpClientErrorException: 403 FORBIDDEN
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:94)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:658)
	at com.example.mongo.demoMongoDB.Services.SharePointService.savePostSharepoint(SharePointService.java:112)
	at com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(SharePointController.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2057)
	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:136)
	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.lambda$handle$1(RequestMappingHandlerAdapter.java:198)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.flatMap(InvocableHandlerMethod.java:136)
	|_	Mono.defer(RequestMappingHandlerAdapter.java:198)
	|_	Mono.then(RequestMappingHandlerAdapter.java:198)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:199)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:200)
	|_	Mono.error(RequestMappingHandlerAdapter.java:230)
	|_	Mono.onErrorResume(RequestMappingHandlerAdapter.java:201)
	|_	Mono.flatMap(DispatcherHandler.java:160)
	|_	Mono.flatMap(DispatcherHandler.java:161)
	|_	Mono.defer(DefaultWebFilterChain.java:71)
	|_	Mono.doOnSuccess(MetricsWebFilter.java:59)
	|_	Mono.doOnError(MetricsWebFilter.java:60)
	|_	Mono.compose(MetricsWebFilter.java:54)
	|_	Mono.defer(DefaultWebFilterChain.java:71)

11-01-2018 09:38:36.116 [reactor-http-nio-2] ERROR o.s.w.s.a.HttpWebHandlerAdapter.handleFailure - Unhandled failure: Se ha anulado una conexión establecida por el software en su equipo host., response already set (status=500)
11-01-2018 09:38:36.131 [reactor-http-nio-2] ERROR o.s.h.s.r.ReactorHttpHandlerAdapter.lambda$apply$0 - Handling completed with error
java.io.IOException: Se ha anulado una conexión establecida por el software en su equipo host.
	at sun.nio.ch.SocketDispatcher.writev0(Native Method)
	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:55)
	at sun.nio.ch.IOUtil.write(IOUtil.java:148)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:504)
	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:418)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:934)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:362)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:901)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1321)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush(CombinedChannelDuplexHandler.java:533)
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115)
	at io.netty.channel.CombinedChannelDuplexHandler.flush(CombinedChannelDuplexHandler.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)
	at io.netty.channel.ChannelDuplexHandler.flush(ChannelDuplexHandler.java:117)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)
	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.onComplete(ChannelOperationsHandler.java:541)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onComplete(ChannelSendOperator.java:197)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1628)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:140)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.FluxSourceMono.subscribe(FluxSourceMono.java:46)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	at reactor.core.publisher.Operators.complete(Operators.java:125)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.Operators.error(Operators.java:175)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:52)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112)
	at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoIgnoreThen] :
	reactor.core.publisher.Mono.then(Mono.java:3228)
	reactor.core.publisher.Mono.thenEmpty(Mono.java:3244)
	reactor.ipc.netty.ReactorNetty$OutboundThen.<init>(ReactorNetty.java:253)
	reactor.ipc.netty.NettyOutbound.then(NettyOutbound.java:378)
	reactor.ipc.netty.NettyOutbound.sendObject(NettyOutbound.java:297)
	reactor.ipc.netty.NettyOutbound.send(NettyOutbound.java:156)
	org.springframework.http.server.reactive.ReactorServerHttpResponse.writeWithInternal(ReactorServerHttpResponse.java:76)
	org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$null$0(AbstractServerHttpResponse.java:175)
	java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	org.springframework.http.server.reactive.AbstractServerHttpResponse.doCommit(AbstractServerHttpResponse.java:224)
	org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$writeWith$1(AbstractServerHttpResponse.java:175)
	org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onNext(ChannelSendOperator.java:158)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:140)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.FluxSourceMono.subscribe(FluxSourceMono.java:46)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:74)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.Operators.complete(Operators.java:125)
	reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100)
	reactor.core.publisher.Operators.error(Operators.java:175)
	reactor.core.publisher.MonoError.subscribe(MonoError.java:52)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112)
	reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.thenEmpty(ReactorNetty.java:253)
	|_	Flux.concat(AbstractServerHttpResponse.java:226)
	|_	Flux.next(AbstractServerHttpResponse.java:226)
	|_	Mono.flatMap(AbstractErrorWebExceptionHandler.java:231)
	|_	Mono.onErrorResume(ExceptionHandlingWebHandler.java:68)
	|_	Mono.error(ResponseStatusExceptionHandler.java:49)
	|_	Mono.onErrorResume(ExceptionHandlingWebHandler.java:68)
	|_	Mono.error(HttpWebHandlerAdapter.java:213)
	|_	Mono.onErrorResume(HttpWebHandlerAdapter.java:185)
	|_	Mono.then(HttpWebHandlerAdapter.java:186)

11-01-2018 09:38:36.270 [reactor-http-nio-2] ERROR r.i.netty.channel.ChannelOperations.error - [HttpServer] Error processing connection. Requesting close the channel
java.io.IOException: Se ha anulado una conexión establecida por el software en su equipo host.
	at sun.nio.ch.SocketDispatcher.writev0(Native Method)
	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:55)
	at sun.nio.ch.IOUtil.write(IOUtil.java:148)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:504)
	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:418)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:934)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:362)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:901)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1321)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush(CombinedChannelDuplexHandler.java:533)
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115)
	at io.netty.channel.CombinedChannelDuplexHandler.flush(CombinedChannelDuplexHandler.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)
	at io.netty.channel.ChannelDuplexHandler.flush(ChannelDuplexHandler.java:117)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)
	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.onComplete(ChannelOperationsHandler.java:541)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onComplete(ChannelSendOperator.java:197)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1628)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:140)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.FluxSourceMono.subscribe(FluxSourceMono.java:46)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	at reactor.core.publisher.Operators.complete(Operators.java:125)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.Operators.error(Operators.java:175)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:52)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112)
	at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoIgnoreThen] :
	reactor.core.publisher.Mono.then(Mono.java:3228)
	reactor.core.publisher.Mono.thenEmpty(Mono.java:3244)
	reactor.ipc.netty.ReactorNetty$OutboundThen.<init>(ReactorNetty.java:253)
	reactor.ipc.netty.NettyOutbound.then(NettyOutbound.java:378)
	reactor.ipc.netty.NettyOutbound.sendObject(NettyOutbound.java:297)
	reactor.ipc.netty.NettyOutbound.send(NettyOutbound.java:156)
	org.springframework.http.server.reactive.ReactorServerHttpResponse.writeWithInternal(ReactorServerHttpResponse.java:76)
	org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$null$0(AbstractServerHttpResponse.java:175)
	java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)
	java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	org.springframework.http.server.reactive.AbstractServerHttpResponse.doCommit(AbstractServerHttpResponse.java:224)
	org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$writeWith$1(AbstractServerHttpResponse.java:175)
	org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onNext(ChannelSendOperator.java:158)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:140)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.FluxSourceMono.subscribe(FluxSourceMono.java:46)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:74)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.Operators.complete(Operators.java:125)
	reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100)
	reactor.core.publisher.Operators.error(Operators.java:175)
	reactor.core.publisher.MonoError.subscribe(MonoError.java:52)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)
	reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112)
	reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.thenEmpty(ReactorNetty.java:253)
	|_	Flux.concat(AbstractServerHttpResponse.java:226)
	|_	Flux.next(AbstractServerHttpResponse.java:226)
	|_	Mono.flatMap(AbstractErrorWebExceptionHandler.java:231)
	|_	Mono.onErrorResume(ExceptionHandlingWebHandler.java:68)
	|_	Mono.error(ResponseStatusExceptionHandler.java:49)
	|_	Mono.onErrorResume(ExceptionHandlingWebHandler.java:68)
	|_	Mono.error(HttpWebHandlerAdapter.java:213)
	|_	Mono.onErrorResume(HttpWebHandlerAdapter.java:185)
	|_	Mono.then(HttpWebHandlerAdapter.java:186)
	|_	Mono.doOnError(ReactorHttpHandlerAdapter.java:75)
	|_	Mono.doOnSuccess(ReactorHttpHandlerAdapter.java:76)

11-01-2018 09:39:36.975 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 10884 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 09:39:36.986 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 09:39:37.170 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@149a97f2: startup date [Thu Jan 11 09:39:37 ART 2018]; root of context hierarchy
11-01-2018 09:39:40.365 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 09:39:40.912 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 09:39:40.925 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 09:39:42.061 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 09:39:42.065 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 09:39:42.070 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 09:39:42.083 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 09:39:42.086 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 09:39:42.087 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 09:39:42.090 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 09:39:42.092 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 09:39:42.093 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 09:39:42.097 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 09:39:42.099 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 09:39:42.100 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 09:39:42.101 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 09:39:42.227 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 09:39:42.227 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 09:39:43.039 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 09:39:43.791 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 09:39:43.793 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 09:39:43.796 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 09:39:43.923 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@149a97f2: startup date [Thu Jan 11 09:39:37 ART 2018]; root of context hierarchy
11-01-2018 09:39:44.346 [cluster-ClusterId{value='5a575b0f3d3c002a845b1eae', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:957}] to localhost:27017
11-01-2018 09:39:44.354 [cluster-ClusterId{value='5a575b0f3d3c002a845b1eae', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4375884}
11-01-2018 09:39:44.691 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 09:39:45.097 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:959}] to localhost:27017
11-01-2018 09:39:45.115 [cluster-ClusterId{value='5a575b103d3c002a845b1eaf', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:958}] to localhost:27017
11-01-2018 09:39:45.118 [cluster-ClusterId{value='5a575b103d3c002a845b1eaf', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2672648}
11-01-2018 09:39:45.256 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:960}] to localhost:27017
11-01-2018 09:39:46.036 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 09:39:46.329 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 09:39:46.816 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 09:39:46.851 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 09:39:46.853 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 09:39:46.855 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 09:39:46.855 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 09:39:46.936 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 09:39:46.937 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 09:39:46.947 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.716 seconds (JVM running for 13.823)
11-01-2018 10:14:17.290 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 3484 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 10:14:17.298 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 10:14:17.513 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@27d7877a: startup date [Thu Jan 11 10:14:17 ART 2018]; root of context hierarchy
11-01-2018 10:14:20.124 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 10:14:20.605 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 10:14:20.614 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 10:14:21.510 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 10:14:21.513 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 10:14:21.517 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 10:14:21.532 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 10:14:21.534 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 10:14:21.535 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 10:14:21.537 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 10:14:21.538 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 10:14:21.540 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 10:14:21.546 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 10:14:21.548 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 10:14:21.550 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 10:14:21.551 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 10:14:21.665 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 10:14:21.666 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 10:14:22.568 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 10:14:22.829 [cluster-ClusterId{value='5a57632e3d3c000d9c903e24', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:961}] to localhost:27017
11-01-2018 10:14:22.837 [cluster-ClusterId{value='5a57632e3d3c000d9c903e24', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4899777}
11-01-2018 10:14:23.360 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 10:14:23.362 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 10:14:23.364 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 10:14:23.678 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@27d7877a: startup date [Thu Jan 11 10:14:17 ART 2018]; root of context hierarchy
11-01-2018 10:14:24.197 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 10:14:24.598 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:963}] to localhost:27017
11-01-2018 10:14:24.599 [cluster-ClusterId{value='5a5763303d3c000d9c903e25', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:962}] to localhost:27017
11-01-2018 10:14:24.604 [cluster-ClusterId{value='5a5763303d3c000d9c903e25', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2817267}
11-01-2018 10:14:24.684 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:964}] to localhost:27017
11-01-2018 10:14:25.527 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 10:14:25.805 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 10:14:26.302 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 10:14:26.337 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 10:14:26.339 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 10:14:26.340 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 10:14:26.341 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 10:14:26.440 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 10:14:26.441 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 10:14:26.450 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 9.997 seconds (JVM running for 16.724)
11-01-2018 10:38:51.398 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 9344 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 10:38:51.435 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 10:38:51.588 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@76c8e3d: startup date [Thu Jan 11 10:38:51 ART 2018]; root of context hierarchy
11-01-2018 10:38:54.288 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 10:38:54.776 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 10:38:54.786 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 10:38:55.683 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 10:38:55.686 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 10:38:55.691 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 10:38:55.703 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 10:38:55.705 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 10:38:55.706 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 10:38:55.708 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 10:38:55.709 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 10:38:55.710 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 10:38:55.716 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 10:38:55.719 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 10:38:55.720 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 10:38:55.721 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 10:38:55.859 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 10:38:55.859 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 10:38:56.569 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 10:38:56.690 [cluster-ClusterId{value='5a5768f03d3c002480e853d1', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:965}] to localhost:27017
11-01-2018 10:38:56.700 [cluster-ClusterId{value='5a5768f03d3c002480e853d1', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5755360}
11-01-2018 10:38:57.439 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 10:38:57.441 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 10:38:57.443 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 10:38:57.574 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@76c8e3d: startup date [Thu Jan 11 10:38:51 ART 2018]; root of context hierarchy
11-01-2018 10:38:58.407 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 10:38:58.852 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:967}] to localhost:27017
11-01-2018 10:38:58.926 [cluster-ClusterId{value='5a5768f23d3c002480e853d2', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:966}] to localhost:27017
11-01-2018 10:38:58.934 [cluster-ClusterId{value='5a5768f23d3c002480e853d2', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3558088}
11-01-2018 10:38:58.937 [restartedMain] INFO  org.mongodb.driver.cluster.info - No server chosen by com.mongodb.async.client.ClientSessionHelper$1@17cd5d70 from cluster description ClusterDescription{type=UNKNOWN, connectionMode=SINGLE, serverDescriptions=[ServerDescription{address=localhost:27017, type=UNKNOWN, state=CONNECTING}]}. Waiting for 30000 ms before timing out
11-01-2018 10:38:58.973 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:968}] to localhost:27017
11-01-2018 10:39:00.027 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 10:39:00.372 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 10:39:00.919 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 10:39:00.965 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 10:39:00.967 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 10:39:00.968 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 10:39:00.970 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 10:39:01.047 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 10:39:01.048 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 10:39:01.059 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.779 seconds (JVM running for 13.279)
11-01-2018 11:09:03.566 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 10904 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:09:03.576 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:09:03.804 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@68d5e0a0: startup date [Thu Jan 11 11:09:03 ART 2018]; root of context hierarchy
11-01-2018 11:09:06.882 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:09:07.374 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:09:07.384 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:09:08.366 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Services.DTO.RequerimientoDTO) throws java.lang.Exception
11-01-2018 11:09:08.369 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:09:08.372 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:09:08.384 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:09:08.387 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:09:08.388 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:09:08.390 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:09:08.391 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:09:08.391 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:09:08.396 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:09:08.399 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:09:08.400 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:09:08.401 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:09:08.509 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:09:08.510 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:09:09.276 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:09:09.386 [cluster-ClusterId{value='5a5770053d3c002a98208825', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:969}] to localhost:27017
11-01-2018 11:09:09.395 [cluster-ClusterId{value='5a5770053d3c002a98208825', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4627334}
11-01-2018 11:09:10.129 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:09:10.131 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:09:10.133 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:09:10.592 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@68d5e0a0: startup date [Thu Jan 11 11:09:03 ART 2018]; root of context hierarchy
11-01-2018 11:09:11.438 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:09:12.038 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:971}] to localhost:27017
11-01-2018 11:09:12.052 [cluster-ClusterId{value='5a5770073d3c002a98208826', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:970}] to localhost:27017
11-01-2018 11:09:12.058 [cluster-ClusterId{value='5a5770073d3c002a98208826', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3929898}
11-01-2018 11:09:12.155 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:972}] to localhost:27017
11-01-2018 11:09:13.085 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:09:13.417 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:09:13.892 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:09:13.931 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:09:13.933 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:09:13.935 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:09:13.935 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:09:14.018 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:09:14.019 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:09:14.032 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 11.552 seconds (JVM running for 13.508)
11-01-2018 11:10:47.770 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 10772 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:10:47.782 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:10:48.153 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@7634753e: startup date [Thu Jan 11 11:10:48 ART 2018]; root of context hierarchy
11-01-2018 11:10:51.838 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:10:52.371 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:10:52.384 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:11:03.512 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 4756 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:11:03.522 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:11:03.668 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@74fcc169: startup date [Thu Jan 11 11:11:03 ART 2018]; root of context hierarchy
11-01-2018 11:11:07.256 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:11:07.792 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:11:07.806 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:11:08.743 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Services.DTO.RequerimientoDTO) throws java.lang.Exception
11-01-2018 11:11:08.746 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:11:08.750 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:11:08.763 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:11:08.765 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:11:08.767 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:11:08.769 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:11:08.771 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:11:08.772 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:11:08.775 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:11:08.777 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:11:08.778 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:11:08.779 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:11:08.907 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:11:08.907 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:11:09.990 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:11:10.148 [cluster-ClusterId{value='5a57707d3d3c001294f85f81', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:973}] to localhost:27017
11-01-2018 11:11:10.158 [cluster-ClusterId{value='5a57707d3d3c001294f85f81', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5836533}
11-01-2018 11:11:10.895 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:11:10.897 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:11:10.898 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:11:11.038 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@74fcc169: startup date [Thu Jan 11 11:11:03 ART 2018]; root of context hierarchy
11-01-2018 11:11:12.632 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:11:13.285 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:974}] to localhost:27017
11-01-2018 11:11:13.379 [restartedMain] INFO  org.mongodb.driver.cluster.info - No server chosen by com.mongodb.async.client.ClientSessionHelper$1@1c0ff931 from cluster description ClusterDescription{type=UNKNOWN, connectionMode=SINGLE, serverDescriptions=[ServerDescription{address=localhost:27017, type=UNKNOWN, state=CONNECTING}]}. Waiting for 30000 ms before timing out
11-01-2018 11:11:13.428 [cluster-ClusterId{value='5a5770803d3c001294f85f82', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:975}] to localhost:27017
11-01-2018 11:11:13.432 [cluster-ClusterId{value='5a5770803d3c001294f85f82', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2341424}
11-01-2018 11:11:13.463 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:976}] to localhost:27017
11-01-2018 11:11:14.538 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:11:14.849 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:11:15.339 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:11:15.377 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:11:15.379 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:11:15.380 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:11:15.381 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:11:15.459 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:11:15.460 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:11:15.471 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 13.617 seconds (JVM running for 16.679)
11-01-2018 11:30:10.249 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 12072 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:30:10.320 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:30:10.483 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4a08f696: startup date [Thu Jan 11 11:30:10 ART 2018]; root of context hierarchy
11-01-2018 11:30:13.064 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:30:13.535 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:30:13.545 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:30:14.398 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:30:14.401 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Services.DTO.RequerimientoDTO) throws java.lang.Exception
11-01-2018 11:30:14.404 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:30:14.437 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:30:14.440 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:30:14.441 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:30:14.443 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:30:14.444 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:30:14.444 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:30:14.448 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:30:14.450 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:30:14.451 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:30:14.452 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:30:14.551 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:30:14.552 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:30:15.255 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:30:15.356 [cluster-ClusterId{value='5a5774f73d3c002f28145f77', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:977}] to localhost:27017
11-01-2018 11:30:15.366 [cluster-ClusterId{value='5a5774f73d3c002f28145f77', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=6002145}
11-01-2018 11:30:16.011 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:30:16.013 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:30:16.014 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:30:16.135 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4a08f696: startup date [Thu Jan 11 11:30:10 ART 2018]; root of context hierarchy
11-01-2018 11:30:16.882 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:30:17.298 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:979}] to localhost:27017
11-01-2018 11:30:17.322 [cluster-ClusterId{value='5a5774f83d3c002f28145f78', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:978}] to localhost:27017
11-01-2018 11:30:17.327 [cluster-ClusterId{value='5a5774f83d3c002f28145f78', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2944624}
11-01-2018 11:30:17.413 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:980}] to localhost:27017
11-01-2018 11:30:18.354 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:30:18.696 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:30:19.201 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:30:19.236 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:30:19.238 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:30:19.240 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:30:19.240 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:30:19.319 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:30:19.319 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:30:19.329 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.035 seconds (JVM running for 11.927)
11-01-2018 11:32:06.122 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 5148 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:32:06.133 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:32:06.325 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@514e4041: startup date [Thu Jan 11 11:32:06 ART 2018]; root of context hierarchy
11-01-2018 11:32:09.061 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:32:09.696 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:32:09.714 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:32:10.748 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:32:10.753 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Services.DTO.RequerimientoDTO) throws java.lang.Exception
11-01-2018 11:32:10.758 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:32:10.771 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:32:10.773 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:32:10.792 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:32:10.794 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:32:10.795 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:32:10.796 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:32:10.806 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:32:10.808 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:32:10.809 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:32:10.810 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:32:10.925 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:32:10.926 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:32:11.787 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:32:11.881 [cluster-ClusterId{value='5a57756b3d3c00141c9a0f3f', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:981}] to localhost:27017
11-01-2018 11:32:11.889 [cluster-ClusterId{value='5a57756b3d3c00141c9a0f3f', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4158489}
11-01-2018 11:32:12.561 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:32:12.563 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:32:12.565 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:32:12.875 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@514e4041: startup date [Thu Jan 11 11:32:06 ART 2018]; root of context hierarchy
11-01-2018 11:32:13.402 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:32:13.808 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:983}] to localhost:27017
11-01-2018 11:32:13.834 [cluster-ClusterId{value='5a57756d3d3c00141c9a0f40', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:982}] to localhost:27017
11-01-2018 11:32:13.839 [cluster-ClusterId{value='5a57756d3d3c00141c9a0f40', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2974482}
11-01-2018 11:32:13.894 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:984}] to localhost:27017
11-01-2018 11:32:14.760 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:32:15.061 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:32:15.527 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:32:15.564 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:32:15.566 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:32:15.567 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:32:15.568 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:32:15.648 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:32:15.649 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:32:15.660 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.564 seconds (JVM running for 12.572)
11-01-2018 11:34:47.628 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 3996 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:34:47.720 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:34:47.918 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@5f6e26e: startup date [Thu Jan 11 11:34:47 ART 2018]; root of context hierarchy
11-01-2018 11:34:51.402 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:34:51.875 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:34:51.885 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:34:52.758 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 11:34:52.761 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:34:52.764 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:34:52.775 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:34:52.777 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:34:52.779 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:34:52.781 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:34:52.782 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:34:52.783 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:34:52.786 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:34:52.789 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:34:52.789 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:34:52.790 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:34:52.914 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:34:52.915 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:34:53.626 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:34:53.724 [cluster-ClusterId{value='5a57760d3d3c000f9cfac71a', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:985}] to localhost:27017
11-01-2018 11:34:53.732 [cluster-ClusterId{value='5a57760d3d3c000f9cfac71a', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4505108}
11-01-2018 11:34:54.388 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:34:54.390 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:34:54.392 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:34:54.533 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@5f6e26e: startup date [Thu Jan 11 11:34:47 ART 2018]; root of context hierarchy
11-01-2018 11:34:55.243 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:34:55.653 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:987}] to localhost:27017
11-01-2018 11:34:55.672 [cluster-ClusterId{value='5a57760f3d3c000f9cfac71b', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:986}] to localhost:27017
11-01-2018 11:34:55.676 [cluster-ClusterId{value='5a57760f3d3c000f9cfac71b', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2410468}
11-01-2018 11:34:55.739 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:988}] to localhost:27017
11-01-2018 11:34:56.610 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:34:56.901 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:34:57.367 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:34:57.406 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:34:57.407 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:34:57.409 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:34:57.410 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:34:57.486 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:34:57.487 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:34:57.498 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.891 seconds (JVM running for 12.685)
11-01-2018 11:46:40.134 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 6172 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:46:40.150 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:46:40.371 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@1c4765ee: startup date [Thu Jan 11 11:46:40 ART 2018]; root of context hierarchy
11-01-2018 11:46:43.107 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:46:43.631 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:46:43.640 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:46:44.584 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:46:44.587 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 11:46:44.590 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:46:44.601 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:46:44.603 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:46:44.604 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:46:44.606 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:46:44.607 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:46:44.608 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:46:44.613 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:46:44.615 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:46:44.616 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:46:44.617 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:46:44.721 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:46:44.722 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:46:45.533 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:46:45.644 [cluster-ClusterId{value='5a5778d53d3c00181c6b7e15', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:989}] to localhost:27017
11-01-2018 11:46:45.653 [cluster-ClusterId{value='5a5778d53d3c00181c6b7e15', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5036465}
11-01-2018 11:46:46.315 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:46:46.317 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:46:46.318 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:46:46.436 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@1c4765ee: startup date [Thu Jan 11 11:46:40 ART 2018]; root of context hierarchy
11-01-2018 11:46:47.090 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:46:47.507 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:991}] to localhost:27017
11-01-2018 11:46:47.528 [cluster-ClusterId{value='5a5778d73d3c00181c6b7e16', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:990}] to localhost:27017
11-01-2018 11:46:47.533 [cluster-ClusterId{value='5a5778d73d3c00181c6b7e16', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3002005}
11-01-2018 11:46:47.593 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:992}] to localhost:27017
11-01-2018 11:46:48.416 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:46:48.710 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:46:49.147 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:46:49.183 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:46:49.185 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:46:49.187 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:46:49.187 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:46:49.253 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:46:49.254 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:46:49.265 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 9.973 seconds (JVM running for 11.674)
11-01-2018 11:47:03.205 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 7468 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:47:03.286 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:47:03.433 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@202e099a: startup date [Thu Jan 11 11:47:03 ART 2018]; root of context hierarchy
11-01-2018 11:47:05.997 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:47:06.465 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:47:06.477 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:47:07.335 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 11:47:07.338 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:47:07.341 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:47:07.356 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:47:07.359 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:47:07.360 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:47:07.363 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:47:07.365 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:47:07.367 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:47:07.374 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:47:07.377 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:47:07.379 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:47:07.381 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:47:07.532 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:47:07.533 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:47:08.309 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:47:08.405 [cluster-ClusterId{value='5a5778ec3d3c001d2cff70cd', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:993}] to localhost:27017
11-01-2018 11:47:08.413 [cluster-ClusterId{value='5a5778ec3d3c001d2cff70cd', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4631066}
11-01-2018 11:47:09.103 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:47:09.105 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:47:09.107 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:47:09.262 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@202e099a: startup date [Thu Jan 11 11:47:03 ART 2018]; root of context hierarchy
11-01-2018 11:47:09.945 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:47:10.390 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:995}] to localhost:27017
11-01-2018 11:47:10.415 [cluster-ClusterId{value='5a5778ed3d3c001d2cff70ce', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:994}] to localhost:27017
11-01-2018 11:47:10.420 [cluster-ClusterId{value='5a5778ed3d3c001d2cff70ce', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=3161553}
11-01-2018 11:47:10.481 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:996}] to localhost:27017
11-01-2018 11:47:11.340 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:47:11.654 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:47:12.106 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:47:12.142 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:47:12.143 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:47:12.145 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:47:12.145 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:47:12.213 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:47:12.214 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:47:12.224 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 9.928 seconds (JVM running for 11.76)
11-01-2018 11:50:28.585 [reactor-http-nio-4] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.logError - Failed to handle request [POST http://localhost:9080/api/sharepoint]
org.springframework.web.client.HttpClientErrorException: 403 FORBIDDEN
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:94)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:658)
	at com.example.mongo.demoMongoDB.Services.SharePointService.savePostSharepoint(SharePointService.java:114)
	at com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(SharePointController.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2057)
	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:136)
	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.lambda$handle$1(RequestMappingHandlerAdapter.java:198)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.flatMap(InvocableHandlerMethod.java:136)
	|_	Mono.defer(RequestMappingHandlerAdapter.java:198)
	|_	Mono.then(RequestMappingHandlerAdapter.java:198)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:199)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:200)
	|_	Mono.error(RequestMappingHandlerAdapter.java:230)
	|_	Mono.onErrorResume(RequestMappingHandlerAdapter.java:201)
	|_	Mono.flatMap(DispatcherHandler.java:160)
	|_	Mono.flatMap(DispatcherHandler.java:161)
	|_	Mono.defer(DefaultWebFilterChain.java:71)
	|_	Mono.doOnSuccess(MetricsWebFilter.java:59)
	|_	Mono.doOnError(MetricsWebFilter.java:60)
	|_	Mono.compose(MetricsWebFilter.java:54)
	|_	Mono.defer(DefaultWebFilterChain.java:71)

11-01-2018 11:51:22.694 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 10040 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 11:51:22.705 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 11:51:22.876 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@48a20783: startup date [Thu Jan 11 11:51:22 ART 2018]; root of context hierarchy
11-01-2018 11:51:25.797 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 11:51:26.389 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 11:51:26.399 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 11:51:27.283 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 11:51:27.287 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 11:51:27.290 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 11:51:27.319 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 11:51:27.321 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 11:51:27.323 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:51:27.325 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 11:51:27.326 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 11:51:27.327 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 11:51:27.336 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 11:51:27.338 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 11:51:27.339 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:51:27.340 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 11:51:27.446 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:51:27.446 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 11:51:28.187 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:51:28.294 [cluster-ClusterId{value='5a5779f03d3c0027385b1ce8', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:997}] to localhost:27017
11-01-2018 11:51:28.302 [cluster-ClusterId{value='5a5779f03d3c0027385b1ce8', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4509306}
11-01-2018 11:51:28.975 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:51:28.977 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 11:51:28.979 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 11:51:29.313 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@48a20783: startup date [Thu Jan 11 11:51:22 ART 2018]; root of context hierarchy
11-01-2018 11:51:30.089 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 11:51:30.550 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:999}] to localhost:27017
11-01-2018 11:51:30.571 [cluster-ClusterId{value='5a5779f23d3c0027385b1ce9', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:998}] to localhost:27017
11-01-2018 11:51:30.575 [cluster-ClusterId{value='5a5779f23d3c0027385b1ce9', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2556953}
11-01-2018 11:51:30.632 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:1000}] to localhost:27017
11-01-2018 11:51:31.470 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 11:51:31.750 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 11:51:32.202 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 11:51:32.236 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 11:51:32.237 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 11:51:32.239 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 11:51:32.240 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 11:51:32.318 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 11:51:32.319 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 11:51:32.330 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.583 seconds (JVM running for 12.363)
11-01-2018 11:51:54.135 [reactor-http-nio-2] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.logError - Failed to handle request [POST http://localhost:9080/api/sharepoint]
org.springframework.web.client.HttpClientErrorException: 403 FORBIDDEN
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:94)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:658)
	at com.example.mongo.demoMongoDB.Services.SharePointService.savePostSharepoint(SharePointService.java:114)
	at com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(SharePointController.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2057)
	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:136)
	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.lambda$handle$1(RequestMappingHandlerAdapter.java:198)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.flatMap(InvocableHandlerMethod.java:136)
	|_	Mono.defer(RequestMappingHandlerAdapter.java:198)
	|_	Mono.then(RequestMappingHandlerAdapter.java:198)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:199)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:200)
	|_	Mono.error(RequestMappingHandlerAdapter.java:230)
	|_	Mono.onErrorResume(RequestMappingHandlerAdapter.java:201)
	|_	Mono.flatMap(DispatcherHandler.java:160)
	|_	Mono.flatMap(DispatcherHandler.java:161)
	|_	Mono.defer(DefaultWebFilterChain.java:71)
	|_	Mono.doOnSuccess(MetricsWebFilter.java:59)
	|_	Mono.doOnError(MetricsWebFilter.java:60)
	|_	Mono.compose(MetricsWebFilter.java:54)
	|_	Mono.defer(DefaultWebFilterChain.java:71)

11-01-2018 14:53:56.989 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 11212 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 14:53:56.998 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 14:53:57.160 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@421a1661: startup date [Thu Jan 11 14:53:57 ART 2018]; root of context hierarchy
11-01-2018 14:53:59.804 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 14:54:00.292 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 14:54:00.302 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 14:54:01.271 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 14:54:01.274 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 14:54:01.278 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 14:54:01.290 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 14:54:01.293 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 14:54:01.294 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 14:54:01.296 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 14:54:01.297 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 14:54:01.298 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 14:54:01.302 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 14:54:01.305 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 14:54:01.306 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 14:54:01.307 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 14:54:01.430 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 14:54:01.430 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 14:54:02.204 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 14:54:02.326 [cluster-ClusterId{value='5a57a4ba3d3c002bcc4c3f5d', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:1001}] to localhost:27017
11-01-2018 14:54:02.334 [cluster-ClusterId{value='5a57a4ba3d3c002bcc4c3f5d', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4973019}
11-01-2018 14:54:03.095 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 14:54:03.097 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 14:54:03.098 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 14:54:03.633 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@421a1661: startup date [Thu Jan 11 14:53:57 ART 2018]; root of context hierarchy
11-01-2018 14:54:04.291 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 14:54:04.790 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:1003}] to localhost:27017
11-01-2018 14:54:04.796 [cluster-ClusterId{value='5a57a4bc3d3c002bcc4c3f5e', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:1002}] to localhost:27017
11-01-2018 14:54:04.802 [cluster-ClusterId{value='5a57a4bc3d3c002bcc4c3f5e', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4263454}
11-01-2018 14:54:04.876 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:1004}] to localhost:27017
11-01-2018 14:54:05.743 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 14:54:06.149 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 14:54:06.614 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 14:54:06.650 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 14:54:06.652 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 14:54:06.654 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 14:54:06.654 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 14:54:06.735 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 14:54:06.735 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 14:54:06.752 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.823 seconds (JVM running for 12.876)
11-01-2018 14:54:28.236 [reactor-http-nio-2] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.logError - Failed to handle request [POST http://localhost:9080/api/sharepoint]
org.springframework.web.client.HttpClientErrorException: 403 FORBIDDEN
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:94)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:658)
	at com.example.mongo.demoMongoDB.Services.SharePointService.savePostSharepoint(SharePointService.java:114)
	at com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(SharePointController.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2057)
	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:136)
	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.lambda$handle$1(RequestMappingHandlerAdapter.java:198)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.flatMap(InvocableHandlerMethod.java:136)
	|_	Mono.defer(RequestMappingHandlerAdapter.java:198)
	|_	Mono.then(RequestMappingHandlerAdapter.java:198)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:199)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:200)
	|_	Mono.error(RequestMappingHandlerAdapter.java:230)
	|_	Mono.onErrorResume(RequestMappingHandlerAdapter.java:201)
	|_	Mono.flatMap(DispatcherHandler.java:160)
	|_	Mono.flatMap(DispatcherHandler.java:161)
	|_	Mono.defer(DefaultWebFilterChain.java:71)
	|_	Mono.doOnSuccess(MetricsWebFilter.java:59)
	|_	Mono.doOnError(MetricsWebFilter.java:60)
	|_	Mono.compose(MetricsWebFilter.java:54)
	|_	Mono.defer(DefaultWebFilterChain.java:71)

11-01-2018 14:55:27.610 [reactor-http-nio-2] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.logError - Failed to handle request [POST http://localhost:9080/api/sharepoint]
org.springframework.web.client.HttpClientErrorException: 403 FORBIDDEN
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:94)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:658)
	at com.example.mongo.demoMongoDB.Services.SharePointService.savePostSharepoint(SharePointService.java:114)
	at com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(SharePointController.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2057)
	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:136)
	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.lambda$handle$1(RequestMappingHandlerAdapter.java:198)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.flatMap(InvocableHandlerMethod.java:136)
	|_	Mono.defer(RequestMappingHandlerAdapter.java:198)
	|_	Mono.then(RequestMappingHandlerAdapter.java:198)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:199)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:200)
	|_	Mono.error(RequestMappingHandlerAdapter.java:230)
	|_	Mono.onErrorResume(RequestMappingHandlerAdapter.java:201)
	|_	Mono.flatMap(DispatcherHandler.java:160)
	|_	Mono.flatMap(DispatcherHandler.java:161)
	|_	Mono.defer(DefaultWebFilterChain.java:71)
	|_	Mono.doOnSuccess(MetricsWebFilter.java:59)
	|_	Mono.doOnError(MetricsWebFilter.java:60)
	|_	Mono.compose(MetricsWebFilter.java:54)
	|_	Mono.defer(DefaultWebFilterChain.java:71)

11-01-2018 12:09:57.279 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 8804 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 12:09:57.293 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 12:09:57.613 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@77df0d91: startup date [Thu Jan 11 12:09:57 ART 2018]; root of context hierarchy
11-01-2018 12:10:01.121 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 12:10:01.719 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 12:10:01.735 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 12:10:02.753 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 12:10:02.756 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 12:10:02.759 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 12:10:02.772 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 12:10:02.793 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:10:02.795 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 12:10:02.798 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:10:02.800 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 12:10:02.801 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 12:10:02.807 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 12:10:02.810 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 12:10:02.811 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:10:02.811 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:10:02.914 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:10:02.914 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:10:03.729 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:10:03.832 [cluster-ClusterId{value='5a577e4b3d3c002264dbdfff', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:1005}] to localhost:27017
11-01-2018 12:10:03.840 [cluster-ClusterId{value='5a577e4b3d3c002264dbdfff', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4789213}
11-01-2018 12:10:04.524 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:10:04.526 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:10:04.528 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 12:10:04.937 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@77df0d91: startup date [Thu Jan 11 12:09:57 ART 2018]; root of context hierarchy
11-01-2018 12:10:05.581 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:10:06.154 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:1007}] to localhost:27017
11-01-2018 12:10:06.193 [cluster-ClusterId{value='5a577e4d3d3c002264dbe000', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:1006}] to localhost:27017
11-01-2018 12:10:06.197 [cluster-ClusterId{value='5a577e4d3d3c002264dbe000', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2629263}
11-01-2018 12:10:06.247 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:1008}] to localhost:27017
11-01-2018 12:10:07.567 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 12:10:07.879 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 12:10:08.873 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 12:10:08.943 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 12:10:08.951 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 12:10:08.953 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 12:10:08.954 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 12:10:09.084 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 12:10:09.085 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 12:10:09.099 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 12.726 seconds (JVM running for 14.73)
11-01-2018 12:20:07.837 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 10400 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 12:20:07.914 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 12:20:08.169 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4e832296: startup date [Thu Jan 11 12:20:08 ART 2018]; root of context hierarchy
11-01-2018 12:20:11.661 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 12:20:12.497 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 12:20:12.520 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 12:20:14.162 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 12:20:14.164 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 12:20:14.168 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 12:20:14.182 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 12:20:14.184 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:20:14.186 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 12:20:14.189 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:20:14.191 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 12:20:14.193 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 12:20:14.200 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:20:14.203 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 12:20:14.206 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 12:20:14.208 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:20:14.364 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:20:14.365 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:20:15.570 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:20:15.697 [cluster-ClusterId{value='5a5780af3d3c0028a0ab96b8', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:1009}] to localhost:27017
11-01-2018 12:20:15.707 [cluster-ClusterId{value='5a5780af3d3c0028a0ab96b8', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5622870}
11-01-2018 12:20:16.517 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:20:16.520 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:20:16.523 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 12:20:16.947 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4e832296: startup date [Thu Jan 11 12:20:08 ART 2018]; root of context hierarchy
11-01-2018 12:20:18.090 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:20:18.685 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:1011}] to localhost:27017
11-01-2018 12:20:18.749 [cluster-ClusterId{value='5a5780b23d3c0028a0ab96b9', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:1010}] to localhost:27017
11-01-2018 12:20:18.766 [cluster-ClusterId{value='5a5780b23d3c0028a0ab96b9', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=9572362}
11-01-2018 12:20:18.823 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:1012}] to localhost:27017
11-01-2018 12:20:20.257 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 12:20:20.677 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 12:20:21.503 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 12:20:21.556 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 12:20:21.558 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 12:20:21.560 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 12:20:21.561 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 12:20:21.666 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 12:20:21.670 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 12:20:21.684 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 14.513 seconds (JVM running for 21.355)
11-01-2018 12:23:25.852 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 7992 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 12:23:25.865 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 12:23:26.300 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@28721466: startup date [Thu Jan 11 12:23:26 ART 2018]; root of context hierarchy
11-01-2018 12:23:30.602 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 12:23:31.256 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 12:23:31.270 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 12:23:32.567 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 12:23:32.570 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 12:23:32.574 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 12:23:32.588 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 12:23:32.590 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:23:32.592 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 12:23:32.594 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:23:32.595 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 12:23:32.596 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 12:23:32.601 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:23:32.603 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:23:32.604 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 12:23:32.605 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 12:23:32.744 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:23:32.745 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:23:33.670 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:23:33.784 [cluster-ClusterId{value='5a5781753d3c001f38f41493', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:1013}] to localhost:27017
11-01-2018 12:23:33.794 [cluster-ClusterId{value='5a5781753d3c001f38f41493', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=5532834}
11-01-2018 12:23:34.550 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:23:34.551 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:23:34.553 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 12:23:34.869 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@28721466: startup date [Thu Jan 11 12:23:26 ART 2018]; root of context hierarchy
11-01-2018 12:23:35.805 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:23:36.225 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:1015}] to localhost:27017
11-01-2018 12:23:36.249 [cluster-ClusterId{value='5a5781773d3c001f38f41494', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:1014}] to localhost:27017
11-01-2018 12:23:36.254 [cluster-ClusterId{value='5a5781773d3c001f38f41494', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2829396}
11-01-2018 12:23:36.313 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:1016}] to localhost:27017
11-01-2018 12:23:37.331 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 12:23:37.840 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 12:23:38.497 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 12:23:38.561 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 12:23:38.562 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 12:23:38.564 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 12:23:38.564 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 12:23:38.660 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 12:23:38.660 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 12:23:38.671 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 14.274 seconds (JVM running for 17.351)
11-01-2018 12:26:32.562 [reactor-http-nio-4] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.logError - Failed to handle request [POST http://localhost:9080/api/sharepoint]
org.springframework.web.client.HttpClientErrorException: 403 FORBIDDEN
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:94)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:658)
	at com.example.mongo.demoMongoDB.Services.SharePointService.savePostSharepoint(SharePointService.java:116)
	at com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(SharePointController.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:171)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)
	at reactor.core.publisher.DrainUtils.postCompleteDrain(DrainUtils.java:131)
	at reactor.core.publisher.DrainUtils.postComplete(DrainUtils.java:186)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onComplete(FluxMapSignal.java:213)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.request(FluxMapSignal.java:225)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	at reactor.core.publisher.FluxMapSignal$FluxMapSignalSubscriber.onSubscribe(FluxMapSignal.java:115)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapSignal.subscribe(FluxMapSignal.java:69)
	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoSingle.subscribe(MonoSingle.java:58)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180)
	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82)
	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252)
	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71)
	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76)
	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at java.lang.Thread.run(Thread.java:745)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFlatMap] :
	reactor.core.publisher.Mono.flatMap(Mono.java:2057)
	org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:136)
	org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.lambda$handle$1(RequestMappingHandlerAdapter.java:198)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271)
	reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803)
	reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3006)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
Error has been observed by the following operator(s):
	|_	Mono.flatMap(InvocableHandlerMethod.java:136)
	|_	Mono.defer(RequestMappingHandlerAdapter.java:198)
	|_	Mono.then(RequestMappingHandlerAdapter.java:198)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:199)
	|_	Mono.doOnNext(RequestMappingHandlerAdapter.java:200)
	|_	Mono.error(RequestMappingHandlerAdapter.java:230)
	|_	Mono.onErrorResume(RequestMappingHandlerAdapter.java:201)
	|_	Mono.flatMap(DispatcherHandler.java:160)
	|_	Mono.flatMap(DispatcherHandler.java:161)
	|_	Mono.defer(DefaultWebFilterChain.java:71)
	|_	Mono.doOnSuccess(MetricsWebFilter.java:59)
	|_	Mono.doOnError(MetricsWebFilter.java:60)
	|_	Mono.compose(MetricsWebFilter.java:54)
	|_	Mono.defer(DefaultWebFilterChain.java:71)

11-01-2018 12:29:37.319 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarting - Starting DemoMongoDbApplication on CDA-AR-0572 with PID 7244 (C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB\target\classes started by gzago in C:\Users\gzago\Desktop\Proyectos\SpringInvestigacion\demoMongoDB)
11-01-2018 12:29:37.329 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStartupProfileInfo - No active profile set, falling back to default profiles: default
11-01-2018 12:29:37.499 [restartedMain] INFO  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext.prepareRefresh - Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4913ca91: startup date [Thu Jan 11 12:29:37 ART 2018]; root of context hierarchy
11-01-2018 12:29:40.212 [restartedMain] INFO  o.s.i.config.IntegrationRegistrar.registerHeaderChannelRegistry - No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
11-01-2018 12:29:40.864 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerErrorChannel - No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
11-01-2018 12:29:40.883 [restartedMain] INFO  o.s.i.c.DefaultConfiguringBeanFactoryPostProcessor.registerTaskScheduler - No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
11-01-2018 12:29:41.932 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint/{nombreLista}/{idItem}],methods=[GET]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.getSharePoint(java.lang.String,java.lang.String) throws java.lang.Exception
11-01-2018 12:29:41.935 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/sharepoint],methods=[POST]}" onto public java.lang.String com.example.mongo.demoMongoDB.Controller.SharePointController.postSharePoint(com.example.mongo.demoMongoDB.Entities.Requerimiento) throws java.lang.Exception
11-01-2018 12:29:41.939 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tarjetas/{id}],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tarjeta> com.example.mongo.demoMongoDB.Controller.TarjetaController.getTarjeta(java.lang.String) throws java.lang.Exception
11-01-2018 12:29:41.950 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[POST]}" onto public reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.saveTweets(com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:29:41.953 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[DELETE]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<java.lang.Void>> com.example.mongo.demoMongoDB.Controller.TweetsController.deleteTweet(java.lang.String)
11-01-2018 12:29:41.955 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.editTweets(java.lang.String,com.example.mongo.demoMongoDB.Entities.Tweets)
11-01-2018 12:29:41.958 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets],methods=[GET]}" onto public reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Tweets> com.example.mongo.demoMongoDB.Controller.TweetsController.getAlls()
11-01-2018 12:29:41.959 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}],methods=[GET]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.getTweetById(java.lang.String)
11-01-2018 12:29:41.961 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/tweets/{id}/{idPersona}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Tweets>> com.example.mongo.demoMongoDB.Controller.TweetsController.addLikeTweet(java.lang.String,java.lang.String)
11-01-2018 12:29:41.964 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[GET]}" onto reactor.core.publisher.Flux<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.findAll()
11-01-2018 12:29:41.967 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[GET]}" onto reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.findById(java.lang.String)
11-01-2018 12:29:41.969 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user],methods=[POST]}" onto reactor.core.publisher.Mono<com.example.mongo.demoMongoDB.Entities.Persona> com.example.mongo.demoMongoDB.Controller.UserController.registrar(com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:29:41.970 [restartedMain] INFO  o.s.w.r.r.m.a.RequestMappingHandlerMapping.register - Mapped "{[/api/user/{id}],methods=[PUT]}" onto public reactor.core.publisher.Mono<org.springframework.http.ResponseEntity<com.example.mongo.demoMongoDB.Entities.Persona>> com.example.mongo.demoMongoDB.Controller.UserController.editUser(java.lang.String,com.example.mongo.demoMongoDB.Entities.Persona)
11-01-2018 12:29:42.106 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:29:42.107 [restartedMain] INFO  o.s.w.r.h.SimpleUrlHandlerMapping.registerHandler - Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
11-01-2018 12:29:42.841 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:29:42.994 [cluster-ClusterId{value='5a5782e63d3c001c4c9837bc', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:1, serverValue:1017}] to localhost:27017
11-01-2018 12:29:43.007 [cluster-ClusterId{value='5a5782e63d3c001c4c9837bc', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=6128104}
11-01-2018 12:29:43.665 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/health],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:29:43.667 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator/info],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto public org.reactivestreams.Publisher<org.springframework.http.ResponseEntity<java.lang.Object>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping$ReadOperationHandler.handle(org.springframework.web.server.ServerWebExchange)
11-01-2018 12:29:43.669 [restartedMain] INFO  o.s.b.a.e.w.r.WebFluxEndpointHandlerMapping.register - Mapped "{[/actuator],methods=[GET],produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}" onto private java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.springframework.boot.actuate.endpoint.web.Link>> org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping.links(org.springframework.http.server.reactive.ServerHttpRequest)
11-01-2018 12:29:43.794 [restartedMain] INFO  o.s.w.r.r.m.a.ControllerMethodResolver.initControllerAdviceCaches - Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4913ca91: startup date [Thu Jan 11 12:29:37 ART 2018]; root of context hierarchy
11-01-2018 12:29:44.501 [restartedMain] INFO  org.mongodb.driver.cluster.info - Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
11-01-2018 12:29:44.972 [restartedMain] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:3, serverValue:1019}] to localhost:27017
11-01-2018 12:29:45.013 [cluster-ClusterId{value='5a5782e83d3c001c4c9837bd', description='null'}-localhost:27017] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:2, serverValue:1018}] to localhost:27017
11-01-2018 12:29:45.026 [cluster-ClusterId{value='5a5782e83d3c001c4c9837bd', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster.info - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 6, 0]}, minWireVersion=0, maxWireVersion=6, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=4344627}
11-01-2018 12:29:45.099 [nioEventLoopGroup-2-2] INFO  org.mongodb.driver.connection.info - Opened connection [connectionId{localValue:4, serverValue:1020}] to localhost:27017
11-01-2018 12:29:46.100 [restartedMain] INFO  o.s.s.c.ThreadPoolTaskScheduler.initialize - Initializing ExecutorService  'taskScheduler'
11-01-2018 12:29:46.395 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer.startServer - LiveReload server is running on port 35729
11-01-2018 12:29:46.855 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter.afterSingletonsInstantiated - Registering beans for JMX exposure on startup
11-01-2018 12:29:46.901 [restartedMain] INFO  o.s.c.s.DefaultLifecycleProcessor.start - Starting beans in phase 0
11-01-2018 12:29:46.903 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.logComponentSubscriptionEvent - Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
11-01-2018 12:29:46.905 [restartedMain] INFO  o.s.i.c.PublishSubscribeChannel.adjustCounterIfNecessary - Channel 'application:9080.errorChannel' has 1 subscriber(s).
11-01-2018 12:29:46.906 [restartedMain] INFO  o.s.i.endpoint.EventDrivenConsumer.start - started _org.springframework.integration.errorLogger
11-01-2018 12:29:46.984 [reactor-http-nio-1] INFO  r.ipc.netty.tcp.BlockingNettyContext.info - Started HttpServer on /0:0:0:0:0:0:0:0:9080
11-01-2018 12:29:46.984 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer.start - Netty started on port(s): 9080
11-01-2018 12:29:46.994 [restartedMain] INFO  c.e.m.d.DemoMongoDbApplication.logStarted - Started DemoMongoDbApplication in 10.645 seconds (JVM running for 13.053)
